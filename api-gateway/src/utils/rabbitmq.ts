import amqp from 'amqplib';

let channel: amqp.Channel | null = null;

const RETRY_ATTEMPTS = 5;
const RETRY_DELAY_MS = 3000;

export const connectToRabbitMQ = async () => {
  const url = process.env.RABBITMQ_URL || 'amqp://rabbitmq';
  console.log(`üöÄ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ RabbitMQ –ø–æ –∞–¥—Ä–µ—Å—É: ${url}`);

  for (let attempt = 1; attempt <= RETRY_ATTEMPTS; attempt++) {
    try {
      const connection = await amqp.connect(url);
      channel = await connection.createChannel();
      console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ RabbitMQ');

      connection.on('close', () => {
        console.error('‚ùå RabbitMQ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ');
        channel = null;
      });

      connection.on('error', (err) => {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å RabbitMQ:', err);
        channel = null;
      });

      return; // –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    } catch (error: unknown) {
      const err = error as Error;
      console.error(
        `‚ùå –ü–æ–ø—ã—Ç–∫–∞ ${attempt} ‚Äî –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ RabbitMQ:`,
        err.message,
      );
      if (attempt < RETRY_ATTEMPTS) {
        console.log(`‚è≥ –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ ${RETRY_DELAY_MS / 1000} —Å–µ–∫—É–Ω–¥...`);
        await new Promise((res) => setTimeout(res, RETRY_DELAY_MS));
      } else {
        console.error(
          '‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ RabbitMQ',
        );
        throw err;
      }
    }
  }
};

export const getChannel = () => {
  if (!channel) {
    throw new Error('‚ùå –ö–∞–Ω–∞–ª RabbitMQ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
  }
  return channel;
};
